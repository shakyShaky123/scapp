#!/usr/bin/env python
from Tkinter import *
import tkFileDialog
import datetime
import tkMessageBox
import Tkinter
import sys
import os
import subprocess
import os, time, math, tempfile
import numpy 
from glob import glob
from datetime import *
from time import *
from datetime import *
import time as time2
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib import cm

#ruta = "/home/camilo/Backup_208/camilo/read_select.208/V3_codigo/"
#ruta = "/home/camilo/TEMP/scapp/"
ruta = os.path.dirname(os.path.abspath(__file__))+"/"
#ruta = "/home/camilo/scapp/"

list_lat = []
list_lon = []
list_prof = []
list2_lat = []
list2_lon = []
list2_prof = []

lat_errors = []
lon_errors = []
depth_errors = []

errors_lat = []
errors_lon = []
errors_depth = []

fecha_hora = []

repetidos = []

list_pac = []
list_car = []
list_mag = []
list_rms = []
contenido1 = ''

if len(sys.argv) > 1:
	report_file = sys.argv[1]
	os.system(ruta+"./sc_rev.py %s"%report_file)
else:
	os.system(ruta+"./sc_rev.py")
	

archivo_inp = open('rev_sc.out','r')
lines = archivo_inp.readlines()
for line in lines:
	lat_e = 0
	lon_e = 0
	prof_e = 0
	pac = 0
	caribe = 0
	mag_val = 0
	campos = line.split('   ')
	c = line.split()
	rms = c[6].strip()
	e_lat = c[1].strip()
	e_lon = c[3].strip()
	e_prof = c[5].strip()
	
	# errores hipocentrales
	hip_e = {"e_lat":e_lat, "e_lon":e_lon, "e_prof":e_prof}
	
	for p, param in hip_e.iteritems():
		if param != "None":
			f_param = float(param)
			if f_param > 12.0:
				if p == "e_lat":
					lat_errors.append(" ".join(c[-2:])+" "+str(param))
				if p == "e_lon":
					lon_errors.append(" ".join(c[-2:])+" "+str(param))
				if p == "e_prof":
					depth_errors.append(" ".join(c[-2:])+" "+str(param))

	if rms != "None":
		rms = float(c[6].strip())
		if rms > 2.0:
			list_rms.append(" ".join(c[-2:])+" "+str(rms))


	if e_lat != "None":
		rms = float(c[1].strip())
		if rms > 12.0:
			errors_lat.append(" ".join(c[-2:])+" "+str(rms))


	if e_lon != "None":
		rms = float(c[3].strip())
		if rms > 12.0:
			errors_lon.append(" ".join(c[-2:])+" "+str(rms))


	if e_prof != "None":
		rms = float(c[5].strip())
		if rms > 12.0:
			errors_depth.append(" ".join(c[-2:])+" "+str(rms))

	i = 0
	for campo in campos:
		i += 1
		if i == 2:
			if campo != " None":
				if float(campo) > 12:
					lat_e = 1
		if i == 4:
			if campo != " None":
				if float(campo) > 12:
					lon_e = 1
		if i == 6:
			if campo != " None":
				if float(campo) > 12:
					prof_e = 1
		if i == 8:
			mag = campo
			if float(mag) >= 3.5:
				mag_val = 1
		if i == 9:
			if campo[0:3] =="'Oc":
				if campo[11:18] == "ano Pac":
					pac = 1
			if campo == "'Mar Caribe')":
				caribe = 1

		if i == 10:
			if lat_e == 1:
				list_lat.append(campo.strip())
			if lon_e == 1:
				list_lon.append(campo.strip())
			if prof_e == 1:
				list_prof.append(campo.strip())
		if i == 11:
			if lat_e == 1:
				list2_lat.append(campo.strip())
			if lon_e == 1:
				list2_lon.append(campo.strip())
			if prof_e == 1:
				list2_prof.append(campo.strip())

			if pac == 1:
				list_pac.append(campo.strip())

			if caribe == 1:
				list_car.append(campo.strip())

			if mag_val == 1:
				list_mag.append(campo.strip())

			fecha = date(int(campo[1:5]),int(campo[6:8]),int(campo[9:11]))
			
			hora = time(int(campo[14:16]),int(campo[17:19]),int(campo[20:22]))
			fecha_hora.append(datetime.combine(fecha,hora))



minute_delta = timedelta(seconds=5)
for i in range(0, len(fecha_hora)):
	if i != 0:
		if abs(fecha_hora[i]-fecha_hora[i-1]) < minute_delta:
			repetidos.append(str(fecha_hora[i])+" y "+str(fecha_hora[i-1]))

contenido1 += "Eventos con magnitud mayor o igual a 3.5\n"
for i in range(0, len(list_mag)):
	contenido1 += list_mag[i]+'\n'
contenido1 += "\n\nEventos con errores en latitud mayor a 12 km\n'Fecha         hora     error\n"
for i in range(0, len(errors_lat)):
	contenido1 += errors_lat[i]+'\n'
contenido1 += "\nEventos con errores en longitud mayor a 12 km\n'Fecha         hora     error\n"
for i in range(0, len(errors_lon)):
	contenido1 += errors_lon[i]+'\n'
contenido1 += "\nEventos con errores en profundidad mayor a 12 km\n'Fecha         hora     error\n"
for i in range(0, len(errors_depth)):
	contenido1 += errors_depth[i]+'\n'
contenido1 += "\nEventos con rms mayor a 2.0s\n'Fecha         hora     rms\n"
for i in range(0, len(list_rms)):
	contenido1 += list_rms[i]+'\n'
contenido1 += "\n\nEventos posiblemente repetidos\n"
for i in range(0, len(repetidos)):
	contenido1 += repetidos[i]+'\n'
contenido1 += "Eventos con epicentro en el pacifico\n"
for i in range(0, len(list_pac)):
	contenido1 += list_pac[i]+'\n'
contenido1 += "Eventos con epicentro en el caribe\n"
for i in range(0, len(list_car)):
	contenido1 += list_car[i]+'\n'


archivo_er = open("sismos_rev.out", "w")
archivo_er.write(contenido1)
archivo_er.close

print"sismos_rev.out guardado con exito"
#time2.sleep(5)

#os.system("nano sismos_rev.out")




